{
  "_args": [
    [
      {
        "raw": "hammerandchisel/erlpack",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "hammerandchisel/erlpack",
        "spec": "github:hammerandchisel/erlpack",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:hammerandchisel/erlpack.git",
          "sshUrl": "git+ssh://git@github.com/hammerandchisel/erlpack.git",
          "httpsUrl": "git+https://github.com/hammerandchisel/erlpack.git",
          "gitUrl": "git://github.com/hammerandchisel/erlpack.git",
          "shortcut": "github:hammerandchisel/erlpack",
          "directUrl": "https://raw.githubusercontent.com/hammerandchisel/erlpack/master/package.json"
        }
      },
      "C:\\Users\\justl\\Desktop\\Klari4Discord"
    ]
  ],
  "_from": "hammerandchisel/erlpack",
  "_id": "erlpack@0.1.0",
  "_inCache": true,
  "_location": "/erlpack",
  "_phantomChildren": {},
  "_requested": {
    "raw": "hammerandchisel/erlpack",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "hammerandchisel/erlpack",
    "spec": "github:hammerandchisel/erlpack",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:hammerandchisel/erlpack.git",
      "sshUrl": "git+ssh://git@github.com/hammerandchisel/erlpack.git",
      "httpsUrl": "git+https://github.com/hammerandchisel/erlpack.git",
      "gitUrl": "git://github.com/hammerandchisel/erlpack.git",
      "shortcut": "github:hammerandchisel/erlpack",
      "directUrl": "https://raw.githubusercontent.com/hammerandchisel/erlpack/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git://github.com/hammerandchisel/erlpack.git#433cfe5cb593668272801fd26635174084b29447",
  "_shasum": "51a90693a80b45a0e79af89268acd1efe8c66adb",
  "_shrinkwrap": null,
  "_spec": "hammerandchisel/erlpack",
  "_where": "C:\\Users\\justl\\Desktop\\Klari4Discord",
  "author": {
    "name": "Jason Citron"
  },
  "bugs": {
    "url": "https://github.com/hammerandchisel/erlpack/issues"
  },
  "dependencies": {
    "bindings": "^1.2.1",
    "nan": "^2.1.0"
  },
  "description": "Erlpack is a fast encoder and decoder for the Erlang Term Format (version 131) for Javascript",
  "devDependencies": {
    "babel-jest": "^6.0.1",
    "jest-cli": "^0.8.2"
  },
  "gitHead": "433cfe5cb593668272801fd26635174084b29447",
  "gypfile": true,
  "homepage": "https://github.com/hammerandchisel/erlpack#readme",
  "jest": {
    "scriptPreprocessor": "<rootDir>/node_modules/babel-jest",
    "unmockedModulePathPatterns": [
      "<rootDir>/build",
      "<rootDir>/node_modules/bindings"
    ]
  },
  "license": "Apache-2.0",
  "main": "./js/index.js",
  "name": "erlpack",
  "optionalDependencies": {},
  "readme": "# Erlpack\r\n\r\nErlpack is a fast encoder and decoder for the Erlang Term Format (version 131) for Python and Javascript.\r\n\r\n# Javascript\r\n\r\n## Things that can be packed:\r\n\r\n- [X] Null\r\n- [X] Booleans\r\n- [X] Strings\r\n- [ ] Atoms\r\n- [X] Unicode Strings\r\n- [X] Floats\r\n- [X] Integers\r\n- [ ] Longs\r\n- [ ] Longs over 64 bits\r\n- [X] Objects\r\n- [X] Arrays\r\n- [ ] Tuples\r\n- [ ] PIDs\r\n- [ ] Ports\r\n- [ ] Exports\r\n- [ ] References\r\n\r\n## How to pack:\r\n```js\r\nlet erlpack = require(\"erlpack\");\r\n\r\npacked = erlpack.pack({'a': true, 'list': ['of', 3, 'things', 'to', 'pack']});\r\n```\r\n\r\n## How to unpack:\r\nNote: Unpacking requires the binary data be a Uint8Array or Buffer. For those using electron/libchromium see the gotcha below. \r\n```js\r\nlet erlpack = require(\"erlpack\");\r\n\r\nlet unpacked = null;\r\nlet packed = new Buffer('', 'binary');\r\ntry  {\r\n    unpacked = erlpack.unpack(packed);\r\n}\r\ncatch (e) {\r\n    // got an exception parsing\r\n}\r\n```\r\n\r\n## Libchromium / Electron Gotcha\r\nSome versions of libchromium replace the native data type backing TypedArrays with a custom data type called \r\nblink::WebArrayBuffer. To keep erlpack' dependencies simple this data type is not supported directly. If you're using\r\nElectron / Libchromium you need to convert the blink::WebArrayBuffer into a node::Buffer before passing to erlpack. You will\r\nneed to add this code into your native package somewhere:\r\n```cpp\r\nv8::Local<v8::Value> ConvertToNodeBuffer(const v8::Local<v8::Object>& blinkArray)\r\n{\r\n    if (node::Buffer::HasInstance(blinkArray)) {\r\n        return blinkArray;\r\n    }\r\n    else if (blinkArray->IsArrayBufferView()) {\r\n        auto byteArray = v8::ArrayBufferView::Cast(*blinkArray);\r\n        return node::Buffer::Copy(v8::Isolate::GetCurrent(), (const char*)byteArray->Buffer()->GetContents().Data(), byteArray->ByteLength()).ToLocalChecked();\r\n    }\r\n    \r\n    return v8::Local<v8::Primitive>(v8::Null(v8::Isolate::GetCurrent()));\r\n}\r\n```\r\n\r\nThen in Javascript something like:\r\n\r\n```js\r\nlet packed = NativeUtils.convertToNodeBuffer(new Uint8Array(binaryPayload));\r\n// unpack now using erlpack.unpack(packed)\r\n```\r\n\r\n# Python\r\n\r\n## Things that can be packed:\r\n\r\n- [X] None\r\n- [X] Booleans\r\n- [X] Strings\r\n- [X] Atoms\r\n- [X] Unicode Strings\r\n- [X] Floats\r\n- [X] Integers\r\n- [X] Longs\r\n- [ ] Longs over 64 bits\r\n- [X] Dictionaries\r\n- [X] Lists\r\n- [X] Tuples\r\n- [X] User Types (via an encode hook)\r\n- [ ] PIDs\r\n- [ ] Ports\r\n- [ ] Exports\r\n- [ ] References\r\n\r\n## How to pack:\r\n```py\r\nfrom erlpack import pack\r\n\r\npacked = pack([\"thing\", \"to\", \"pack\"])\r\n```\r\n\r\n## How to unpack:\r\n```py\r\nfrom erlpack import unpack\r\n\r\nunpacked = unpack(packed)\r\n```\r\n\r\n## How to pack an atom:\r\n\r\n```py\r\nfrom erlpack import Atom, pack\r\n\r\npacked = pack(Atom('hello'))\r\n```\r\n\r\n## How to use an encode hook.\r\n\r\n```py\r\nfrom erlpack import ErlangTermEncoder\r\n\r\ndef encode_hook(obj):\r\n    if isinstance(obj, datetime.datetime):\r\n        return obj.isoformat()\r\n\r\nencoder = ErlangTermEncoder(encode_hook=encode_hook)\r\npacked = encoder.pack(datetime.datetime(2015, 12, 25, 12, 23, 55))\r\n\r\n```\r\n\r\n## How to make custom types packable.\r\n\r\n```py\r\nfrom erlpack import pack, Atom\r\n\r\nclass User(object):\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\n    def __erlpack__(self):\r\n        return {\r\n            Atom('name'): self.name,\r\n            Atom('age'): self.age\r\n        }\r\n\r\nu = User(name='Jake', age=23)\r\npacked = pack(u)\r\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hammerandchisel/erlpack.git"
  },
  "scripts": {
    "install": "node-gyp rebuild",
    "test": "jest"
  },
  "version": "0.1.0"
}
